{"version":3,"sources":["store/actions/sources.js","store/actions/filters.js","constants/constants.js","modules/map/map-controller.js","store/actions/layers.js","modules/map/map.jsx","modules/layers-group/layer-control/layer-control.jsx","modules/layers-group/layer-control/layer-control-controller.js","modules/layers-group/layers-group.jsx","modules/layers-group/layers-group-controller.js","modules/filters-list/filter-layer-group/filter-control/filter-control-option/filter-control-option.jsx","modules/filters-list/filter-layer-group/filter-control/filter-control-option/filter-control-option-controller.js","modules/filters-list/filter-layer-group/filter-control/filter-control.jsx","modules/filters-list/filter-layer-group/filter-layer-group.jsx","modules/filters-list/filter-layer-group/filter-layer-group-controller.js","modules/filters-list/filters-list.jsx","modules/filters-list/filters-list-controller.js","modules/app/app.jsx","store/reducers/layers.js","store/reducers/sources.js","store/reducers/filters.js","store/reducers/index.js","store/store.js","index.js"],"names":["addSource","source","type","payload","id","data","clearFilters","layerId","dispatch","clearFiltersAction","changeResultFilter","getState","resultFilter","currentLayerFilters","filters","filtersGroupedByFieldName","groupBy","f","fieldName","hasOwnProperty","length","expressionArr","map","expression","resultFieldFilter","push","resultExpression","changeResultFilterAction","layersConfig","dataUrl","paint","layout","visibility","filterFields","mapDispatchToProps","fetchSourceData","url","a","fetch","response","json","console","error","addLayer","layer","addLayerAction","MapController","connect","state","sources","layers","props","useState","latitude","longitude","zoom","viewport","setViewport","useEffect","forEach","l","Fragment","style","width","height","mapStyle","accessToken","onViewportChange","filter","LayerControl","React","memo","switchVisibility","onChange","useCallback","e","checked","switchVisibilityAction","LayerControlController","LayersGroup","className","LayersGroupController","FilterControlOption","option","addFilter","removeFilter","filterId","layerFilters","currentFilter","find","isChecked","indexOf","defaultChecked","fieldValue","expressionType","addFilterAction","removeFilterAction","FilterControlOptionController","FilterControl","options","sortedOptions","sort","index","FilterLayerGroup","Text","Typography","features","filterFieldValues","useMemo","obj","ff","properties","onClick","filterOptions","Object","keys","FilterLayerGroupController","FiltersList","Panel","Collapse","header","FiltersListController","App","INITIAL_STATE","action","concat","filterToAdd","combineReducers","store","createStore","rootReducer","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","r","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a80dccdc.chunk.js","sourcesContent":["export const addSource = (source) => ({\n  type: \"ADD_SOURCE\",\n  payload: {\n    id: source.id,\n    type: source.type,\n    data: source.data,\n  },\n});\n\nexport const fetchSourceData = (url, id) => {\n  return async (dispatch) => {\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      const source = {\n        id,\n        type: \"geojson\",\n        data,\n      };\n\n      dispatch(addSource(source));\n    } catch (err) {\n      console.error(err);\n    }\n  };\n};\n","import { groupBy } from \"lodash\";\n\n// action creators\nexport const addFilterAction = (\n  layerId,\n  filterId,\n  fieldName,\n  fieldValue,\n  expressionType\n) => ({\n  type: \"ADD_FILTER\",\n  payload: {\n    layerId: layerId,\n    id: filterId,\n    fieldName: fieldName,\n    fieldValue: fieldValue,\n    expressionType: expressionType,\n    expression: [expressionType, fieldName, fieldValue],\n  },\n});\n\nexport const removeFilterAction = (layerId, filterId) => ({\n  type: \"REMOVE_FILTER\",\n  payload: {\n    layerId: layerId,\n    id: filterId,\n  },\n});\n\nexport const clearFiltersAction = (layerId) => ({\n  type: \"CLEAR_FILTERS\",\n  payload: {\n    layerId: layerId,\n  },\n});\n\nexport const changeResultFilterAction = (layerId, resultExpression) => ({\n  type: \"CHANGE_RESULT_FILTER\",\n  payload: {\n    layerId: layerId,\n    resultExpression: resultExpression,\n  },\n});\n\n// dispatchers\nexport const addFilter = (\n  layerId,\n  filterId,\n  fieldName,\n  fieldValue,\n  expressionType\n) => {\n  return (dispatch) => {\n    dispatch(\n      addFilterAction(layerId, filterId, fieldName, fieldValue, expressionType)\n    );\n    dispatch(changeResultFilter(layerId));\n  };\n};\n\nexport const removeFilter = (layerId, filterId) => {\n  return (dispatch) => {\n    dispatch(removeFilterAction(layerId, filterId));\n    dispatch(changeResultFilter(layerId));\n  };\n};\n\nexport const clearFilters = (layerId) => {\n  return (dispatch) => {\n    dispatch(clearFiltersAction(layerId));\n    dispatch(changeResultFilter(layerId));\n  };\n};\n\nexport const changeResultFilter = (layerId) => {\n  return (dispatch, getState) => {\n    let resultFilter = [\"all\"];\n    const currentLayerFilters = getState().filters[layerId].filters;\n    const filtersGroupedByFieldName = groupBy(\n      currentLayerFilters,\n      (f) => f.fieldName\n    );\n    for (let fieldName in filtersGroupedByFieldName) {\n      if (filtersGroupedByFieldName.hasOwnProperty(fieldName)) {\n        const filters = filtersGroupedByFieldName[fieldName];\n        if (filters.length) {\n          const expressionArr = filters.map((f) => f.expression);\n          const resultFieldFilter = [\"any\", ...expressionArr];\n          resultFilter.push(resultFieldFilter);\n        }\n      }\n    }\n    dispatch(changeResultFilterAction(layerId, resultFilter));\n  };\n};\n","export const MAPBOX_ACCESS_TOKEN =\n  \"pk.eyJ1IjoieWFzZXZwbGF0b24iLCJhIjoiY2poaTJrc29jMDF0YzM2cDU1ZnM1c2xoMiJ9.FhmWdHG7ar14dQv1Aoqx4A\";\n\nconst citiesStyle = {\n  type: \"circle\",\n  paint: {\n    \"circle-color\": \"#000\",\n    \"circle-stroke-color\": \"#fff\",\n    \"circle-stroke-width\": 0.5,\n  },\n  layout: {\n    visibility: \"visible\",\n  },\n};\n\nconst countriesStyle = {\n  type: \"fill\",\n  paint: {\n    \"fill-color\": \"#088\",\n    \"fill-opacity\": 0.7,\n    \"fill-outline-color\": \"#fff\",\n  },\n  layout: {\n    visibility: \"visible\",\n  },\n};\n\nexport const layersConfig = [\n  {\n    id: \"countries\",\n    dataUrl: \"/assets/countries.geojson\",\n    source: \"countries\",\n    ...countriesStyle,\n    filterFields: [\"CONTINENT\", \"ECONOMY\", \"INCOME_GRP\"],\n  },\n  {\n    id: \"cities\",\n    dataUrl: \"/assets/cities.geojson\",\n    source: \"cities\",\n    ...citiesStyle,\n    filterFields: [],\n  },\n];\n","import { connect } from \"react-redux\";\nimport { fetchSourceData } from \"../../store/actions/sources\";\nimport { addLayer } from \"../../store/actions/layers\";\nimport { clearFilters } from \"../../store/actions/filters\";\nimport { MapComponent } from \"./map\";\n\nconst mapStateToProps = (state) => {\n  return {\n    sources: state.sources,\n    layers: state.layers,\n    filters: state.filters,\n  };\n};\n\nconst mapDispatchToProps = {\n  fetchSourceData,\n  addLayer,\n  clearFilters,\n};\n\nexport const MapController = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MapComponent);\n","export const addLayerAction = (layer) => ({\n  type: \"ADD_LAYER\",\n  payload: {\n    id: layer.id,\n    source: layer.id,\n    type: layer.type,\n    paint: layer.paint,\n    layout: layer.layout,\n    filterFields: layer.filterFields,\n  },\n});\n\nexport const addLayer = (layer) => {\n  return (dispatch) => {\n    dispatch(addLayerAction(layer));\n  };\n};\n\nexport const switchVisibilityAction = (layerId) => ({\n  type: \"SWITCH_VISIBILITY\",\n  payload: {\n    id: layerId,\n  },\n});\n\nexport const switchVisibility = (layerId) => {\n  return (dispatch) => {\n    dispatch(switchVisibilityAction(layerId));\n  };\n};\n","import React, { useState, useEffect } from \"react\";\nimport MapGL, { Source, Layer } from \"@urbica/react-map-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { MAPBOX_ACCESS_TOKEN, layersConfig } from \"../../constants/constants\";\n\nexport const MapComponent = (props) => {\n  const { fetchSourceData, sources, layers, addLayer, filters, clearFilters } = props;\n  const [viewport, setViewport] = useState({\n    latitude: 0,\n    longitude: 0,\n    zoom: 1,\n  });\n\n  useEffect(() => {\n    layersConfig.forEach((l) => {\n      fetchSourceData(l.dataUrl, l.id);\n      addLayer({\n        id: l.id,\n        source: l.id,\n        type: l.type,\n        paint: l.paint,\n        layout: l.layout,\n        filterFields: l.filterFields,\n      });\n      clearFilters(l.id);\n    });\n  }, [fetchSourceData, addLayer, clearFilters]);\n\n  const renderSource = ({ id, type, data }) => (\n    <Source key={id} id={id} type={type} data={data} />\n  );\n\n  const renderLayer = ({ id, source, type, paint, layout }) => (\n    <Layer\n      key={id}\n      id={id}\n      source={source}\n      type={type}\n      paint={paint}\n      layout={layout}\n      filter={filters[id].resultExpression}\n    />\n  );\n\n  return (\n    <React.Fragment>\n      <MapGL\n        style={{ width: \"100vw\", height: \"100vh\" }}\n        mapStyle=\"mapbox://styles/mapbox/light-v9\"\n        accessToken={MAPBOX_ACCESS_TOKEN}\n        {...viewport}\n        onViewportChange={setViewport}\n      >\n        {sources.length && sources.map(renderSource)}\n        {layers.length && layers.map(renderLayer)}\n      </MapGL>\n    </React.Fragment>\n  );\n};\n","import React, { useCallback } from \"react\";\nimport { Checkbox } from \"antd\";\n\nexport const LayerControl = React.memo((props) => {\n  const { layer, switchVisibility } = props;\n\n  const onChange = useCallback((e) => {\n    switchVisibility(layer.id);\n  }, [switchVisibility, layer.id]);\n\n  return (\n    <Checkbox\n      checked={layer.layout.visibility === \"visible\"}\n      onChange={onChange}\n    >\n      {layer.id}\n    </Checkbox>\n  );\n});\n","import { connect } from \"react-redux\";\nimport { switchVisibility } from \"../../../store/actions/layers\";\nimport { LayerControl } from \"./layer-control\";\n\nconst mapDispatchToProps = {\n  switchVisibility,\n};\n\nexport const LayerControlController = connect(\n  null,\n  mapDispatchToProps\n)(LayerControl);\n","import React from \"react\";\nimport \"./layers-group.css\";\nimport { LayerControlController as LayerControl } from \"./layer-control/layer-control-controller\";\n\nexport const LayersGroup = React.memo((props) => {\n  const { layers } = props;\n\n  const renderLayerControl = (layer) => {\n    return (\n      <li key={layer.id}>\n        <LayerControl layer={layer} />\n      </li>\n    );\n  };\n\n  return (\n    <div className=\"layers-group\">\n      <h3 className=\"text-align-center\">LAYERS</h3>\n      <ul>\n        {layers.length && layers.map(renderLayerControl)}\n      </ul>\n    </div>\n  );\n});\n","import { connect } from \"react-redux\";\nimport { LayersGroup } from \"./layers-group\";\n\nconst mapStateToProps = (state) => {\n  return {\n    layers: state.layers,\n  };\n};\n\nexport const LayersGroupController = connect(\n  mapStateToProps,\n  null\n)(LayersGroup);\n","import React from \"react\";\nimport { Checkbox } from \"antd\";\n\nexport const FilterControlOption = React.memo((props) => {\n  const { option, layer, fieldName, addFilter, removeFilter, filters } = props;\n  const expressionType = \"==\";\n  const filterId = `filter-${layer.id}-${fieldName}${expressionType}${option}`;\n  const layerFilters = filters[layer.id].filters;\n  const currentFilter = layerFilters.find((f) => f.id === filterId);\n  const currentFilterIndex = currentFilter\n    ? layerFilters.indexOf(currentFilter)\n    : -1;\n  const isChecked = currentFilterIndex > -1;\n\n  const onCheckboxChange = (e) => {\n    isChecked\n      ? removeFilter(layer.id, filterId)\n      : addFilter(layer.id, filterId, fieldName, option, expressionType);\n  };\n\n  return (\n    <Checkbox\n      defaultChecked={false}\n      checked={isChecked}\n      onChange={onCheckboxChange}\n    >\n      {option}\n    </Checkbox>\n  );\n});\n","import { connect } from \"react-redux\";\nimport { FilterControlOption } from \"./filter-control-option\";\nimport { addFilter, removeFilter } from \"../../../../../store/actions/filters\";\n\nconst mapStateToProps = (state) => {\n  return {\n    filters: state.filters,\n  };\n};\n\nconst mapDispatchToProps = {\n  addFilter,\n  removeFilter,\n};\n\nexport const FilterControlOptionController = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FilterControlOption);\n","import React from \"react\";\nimport { FilterControlOptionController as FilterControlOption } from \"./filter-control-option/filter-control-option-controller\";\n\nexport const FilterControl = React.memo((props) => {\n  const { options, layer, fieldName } = props;\n\n  const sortedOptions = options.length && options.sort();\n\n  const renderFilterControlOption = (option, index) => {\n    return (\n      <li key={index}>\n        <FilterControlOption option={option} layer={layer} fieldName={fieldName} />\n      </li>\n    );\n  };\n\n  return (\n    <ul>{options.length && sortedOptions.map(renderFilterControlOption)}</ul>\n  );\n});\n","import React, { useMemo } from \"react\";\nimport { groupBy } from \"lodash\";\nimport { Typography } from \"antd\";\nimport { FilterControl } from \"./filter-control/filter-control\";\nimport \"./filter-layer-group.css\";\n\nexport const FilterLayerGroup = React.memo((props) => {\n  const { layer, source, clearFilters, filters } = props;\n  const { Text } = Typography;\n  const features = source.data.features;\n  const filterFields = layer.filterFields;\n\n  const filterFieldValues = useMemo(() => {\n    const obj = {};\n    filterFields.forEach((ff) => {\n      obj[ff] = groupBy(features, (f) => f.properties[ff]);\n    });\n\n    return obj;\n  }, [filterFields, features]);\n\n  const renderFilterControl = (fieldName, index) => {\n    const filterOptions = Object.keys(filterFieldValues[fieldName]);\n    return (\n      <li key={index} className=\"filter-control\">\n        <b>{fieldName}</b>\n        <FilterControl\n          options={filterOptions}\n          fieldName={fieldName}\n          layer={layer}\n        />\n      </li>\n    );\n  };\n\n  const onClearFilters = () => {\n    clearFilters(layer.id);\n  };\n\n  return filterFields.length ? (\n    <React.Fragment>\n      {filters[layer.id].filters.length > 0 && (\n        <Text\n          type=\"secondary\"\n          className=\"btn--clear-filters\"\n          onClick={onClearFilters}\n        >\n          clear all filters\n        </Text>\n      )}\n      <ul>{filterFields.map(renderFilterControl)}</ul>\n    </React.Fragment>\n  ) : (\n      <p>no filters</p>\n    );\n});\n","import { connect } from \"react-redux\";\nimport { FilterLayerGroup } from \"./filter-layer-group\";\nimport { clearFilters } from \"../../../store/actions/filters\";\n\nconst mapStateToProps = (state) => {\n  return {\n    filters: state.filters,\n  };\n};\n\nconst mapDispatchToProps = {\n  clearFilters,\n};\n\nexport const FilterLayerGroupController = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FilterLayerGroup);\n","import React from \"react\";\nimport { Collapse } from 'antd';\nimport \"./filters-list.css\";\nimport { FilterLayerGroupController as FilterLayerGroup } from \"./filter-layer-group/filter-layer-group-controller\";\n\nexport const FiltersList = React.memo((props) => {\n  const { layers, sources } = props;\n  const { Panel } = Collapse;\n\n  const renderFilterLayerGroup = layer => {\n    const source = sources.filter(source => source.id === layer.source)[0];\n    return (\n      <Panel header={layer.id} key={layer.id}>\n        <FilterLayerGroup layer={layer} source={source} />\n      </Panel>\n    )\n  };\n\n  return (\n    <React.Fragment>\n      <div className=\"filters-list\">\n        <h3 className=\"text-align-center\">FILTERS</h3>\n        <Collapse>\n          {\n            layers.length && layers.map(renderFilterLayerGroup)\n          }\n        </Collapse>\n      </div>\n    </React.Fragment>\n  );\n})","import { connect } from \"react-redux\";\nimport { FiltersList } from \"./filters-list\";\n\nconst mapStateToProps = (state) => {\n  return {\n    layers: state.layers,\n    sources: state.sources,\n  };\n};\n\nexport const FiltersListController = connect(\n  mapStateToProps,\n  null\n)(FiltersList);\n","import \"antd/dist/antd.css\";\nimport React from \"react\";\nimport { MapController as Map } from \"../map/map-controller\";\nimport { LayersGroupController as LayersGroup } from \"../layers-group/layers-group-controller\";\nimport { FiltersListController as FiltersList } from \"../filters-list/filters-list-controller\";\n\nexport const App = React.memo(() => {\n  return (\n    <div className=\"App\">\n      <Map />\n      <aside className=\"side-menu\">\n        <LayersGroup />\n        <FiltersList />\n      </aside>\n    </div>\n  );\n})\n","const INITIAL_STATE = [];\n\nconst layers = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"ADD_LAYER\":\n      return state.concat(action.payload);\n    case \"SWITCH_VISIBILITY\":\n      return state.map((l) => {\n        if (l.id === action.payload.id) {\n          return l.layout.visibility === \"visible\"\n            ? { ...l, layout: { ...l.layout, visibility: \"none\" } }\n            : { ...l, layout: { ...l.layout, visibility: \"visible\" } };\n        } else {\n          return l;\n        }\n      });\n    default:\n      return state;\n  }\n};\n\nexport default layers;\n","const INITIAL_STATE = [];\n\nconst sources = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"ADD_SOURCE\":\n      return state.concat(action.payload);\n    default:\n      return state;\n  }\n};\n\nexport default sources;\n","const INITIAL_STATE = {};\n\nconst filters = (state = INITIAL_STATE, action) => {\n  let layerId;\n  switch (action.type) {\n    case \"ADD_FILTER\":\n      layerId = action.payload.layerId;\n      const filterToAdd = {\n        id: action.payload.id,\n        expressionType: action.payload.expressionType,\n        fieldName: action.payload.fieldName,\n        fieldValue: action.payload.fieldValue,\n        expression: action.payload.expression,\n      };\n      return {\n        ...state,\n        [layerId]: {\n          ...state[layerId],\n          filters: [...state[layerId].filters, filterToAdd],\n        },\n      };\n\n    case \"REMOVE_FILTER\":\n      layerId = action.payload.layerId;\n      return {\n        ...state,\n        [layerId]: {\n          ...state[layerId],\n          filters: state[layerId].filters.filter(\n            (f) => f.id !== action.payload.id\n          ),\n        },\n      };\n\n    case \"CHANGE_RESULT_FILTER\":\n      layerId = action.payload.layerId;\n      return {\n        ...state,\n        [layerId]: {\n          ...state[layerId],\n          resultExpression: action.payload.resultExpression,\n        },\n      };\n\n    case \"CLEAR_FILTERS\":\n      layerId = action.payload.layerId;\n      return {\n        ...state,\n        [layerId]: {\n          ...state[layerId],\n          filters: [],\n        },\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filters;\n","import { combineReducers } from \"redux\";\nimport layers from \"./layers\";\nimport sources from \"./sources\";\nimport filters from \"./filters\";\n\nexport default combineReducers({\n  sources,\n  layers,\n  filters,\n});\n","import { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nexport const store = createStore(\n  rootReducer,\n  compose(\n    applyMiddleware(thunk),\n    window.__REDUX_DEVTOOLS_EXTENSION__\n      ? window.__REDUX_DEVTOOLS_EXTENSION__()\n      : (r) => r\n  )\n);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./styles/index.css\";\nimport { App } from \"./modules/app/app\";\nimport { store } from \"./store/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}